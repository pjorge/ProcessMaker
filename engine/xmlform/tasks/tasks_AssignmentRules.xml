<?xml version="1.0" encoding="UTF-8"?>
<dynaForm name="tasks_AssignmentRules" width="99%" mode="edit" enableTemplate="0" border="0" height="305px">

<TAS_UID type="hidden"/>

<INDEX type="hidden"/>

<IFORM type="hidden"/>

<PRO_UID type="private"/>

<LANG type="private"/>

<TAS_ASSIGN_TYPE type="radiogroup" defaultvalue="BALANCED" group="1">
  <en>Case to be assigned by<option name="BALANCED">Cyclical Assignment</option><option name="MANUAL">Manual Assignment</option><option name="EVALUATE">Value Based Assignment</option>
  <option name="REPORT_TO">Reports to</option>
  <option name="SELF_SERVICE">Self Service</option>
  <!-- this feature is temporarily disabled -->
  <!--option name="STATIC_MI">Static Partial Join for Multiple Instances</option>
  <option name="CANCEL_MI">Cancelling Partial Join for Multiple Instances</option-->
  </en>
</TAS_ASSIGN_TYPE>

<TAS_ASSIGN_VARIABLE type="textpm" size="40" maxlength="155" defaultvalue="@@SYS_NEXT_USER_TO_BE_ASSIGNED" showVars="1" process="@#PRO_UID">
  <en>Variable for Value Based Assignment</en>
</TAS_ASSIGN_VARIABLE>
  <!-- this feature is temporarily disabled -->
<!--TAS_MI_INSTANCE_VARIABLE type="textpm" size="40" maxlength="155" defaultvalue="@@SYS_VAR_TOTAL_INSTANCE" showVars="1" process="@#PRO_UID">
  <en>Variable for No of Instances</en>
</TAS_MI_INSTANCE_VARIABLE>
<TAS_MI_COMPLETE_VARIABLE type="textpm" size="40" maxlength="155" defaultvalue="@@SYS_VAR_TOTAL_INSTANCES_COMPLETE" showVars="1" process="@#PRO_UID">
  <en>Variable for No of Instances to complete</en>
</TAS_MI_COMPLETE_VARIABLE-->


<JS type="javascript"><![CDATA[

var showTextpm = function()
{
/* this feature is temporarily disabled
if(getField('TAS_ASSIGN_TYPE][STATIC_MI').checked == true || getField('TAS_ASSIGN_TYPE][CANCEL_MI').checked == true)
{
  showRowById('TAS_MI_INSTANCE_VARIABLE');
  showRowById('TAS_MI_COMPLETE_VARIABLE');
  hideRowById('TAS_ASSIGN_VARIABLE');
}
else */
if(getField('TAS_ASSIGN_TYPE][EVALUATE').checked == true)
  {
  showRowById('TAS_ASSIGN_VARIABLE');
/* this feature is temporarily disabled
  hideRowById('TAS_MI_INSTANCE_VARIABLE');
  hideRowById('TAS_MI_COMPLETE_VARIABLE');*/
  }
 else
 {
    hideRowById('TAS_ASSIGN_VARIABLE');
/* this feature is temporarily disabled
    hideRowById('TAS_MI_INSTANCE_VARIABLE');
    hideRowById('TAS_MI_COMPLETE_VARIABLE');*/
 }
};

/* Recovery data */
if (aTaskFlag[1])
{
  switch (oTaskData.TAS_ASSIGN_TYPE)
  {
    case 'SELF_SERVICE':
      getField('TAS_ASSIGN_TYPE][SELF_SERVICE').checked = true;
      showTextpm();
    break;
    case 'REPORT_TO':
      getField('TAS_ASSIGN_TYPE][REPORT_TO').checked = true;
      showTextpm();
    break;
    case 'BALANCED':
      getField('TAS_ASSIGN_TYPE][BALANCED').checked = true;
      showTextpm();
    break;
    case 'MANUAL':
      getField('TAS_ASSIGN_TYPE][MANUAL').checked = true;
      showTextpm();
    break;
    case 'EVALUATE':
      getField('TAS_ASSIGN_TYPE][EVALUATE').checked = true;
      showTextpm();
    break;
    case 'SELFSERVICE':
      getField('TAS_ASSIGN_TYPE][SELFSERVICE').checked = true;
      showTextpm();
    break;
    /* this feature is temporarily disabled
    case 'STATIC_MI':
      getField('TAS_ASSIGN_TYPE][STATIC_MI').checked = true;
      showTextpm();
    break;
    case 'CANCEL_MI':
      getField('TAS_ASSIGN_TYPE][CANCEL_MI').checked = true;
      showTextpm();
    break;*/
  }
  getField('TAS_ASSIGN_VARIABLE').value         = oTaskData.TAS_ASSIGN_VARIABLE;
/*
  getField('TAS_MI_INSTANCE_VARIABLE').value    = oTaskData.TAS_MI_INSTANCE_VARIABLE;
  getField('TAS_MI_COMPLETE_VARIABLE').value    = oTaskData.TAS_MI_COMPLETE_VARIABLE;
*/
  /*getField('TAS_DERIVATION').checked          = (oTaskData.TAS_DERIVATION == 'TRUE' ? true : false);
  getField('TAS_PRIORITY_VARIABLE').checked     = (oTaskData.TAS_PRIORITY_VARIABLE == 'TRUE' ? true : false);
  getField('TAS_ASSIGN_LOCATION').checked       = (oTaskData.TAS_ASSIGN_LOCATION == 'TRUE' ? true : false);
  getField('TAS_ASSIGN_LOCATION_ADHOC').checked = (oTaskData.TAS_ASSIGN_LOCATION_ADHOC == 'TRUE' ? true : false);
  getField('TAS_OWNER_APP').value               = oTaskData.TAS_OWNER_APP;*/
}
else
{
saveDataTaskTemporal(2);
aTaskFlag[1] = true;
showTextpm();
}




leimnud.event.add(getField('TAS_ASSIGN_TYPE][SELF_SERVICE'), 'click', function() {
  showTextpm();
});

leimnud.event.add(getField('TAS_ASSIGN_TYPE][REPORT_TO'), 'click', function() {
  showTextpm();
});

leimnud.event.add(getField('TAS_ASSIGN_TYPE][BALANCED'), 'click', function() {
  showTextpm();
});
leimnud.event.add(getField('TAS_ASSIGN_TYPE][MANUAL'), 'click', function() {
  showTextpm();
});
leimnud.event.add(getField('TAS_ASSIGN_TYPE][EVALUATE'), 'click', function() {
  showTextpm();
});
/* this feature is temporarily disabled
leimnud.event.add(getField('TAS_ASSIGN_TYPE][STATIC_MI'), 'click', function() {
  showTextpm();
});
leimnud.event.add(getField('TAS_ASSIGN_TYPE][CANCEL_MI'), 'click', function() {
  showTextpm();
});*/

if (!getField('TAS_ASSIGN_TYPE][EVALUATE').checked) {
  showTextpm();
}


var _oVarsPanel_;
var showDynaformsFormVars = function(sFieldName, sAjaxServer, sProcess, sSymbol) {
	_oVarsPanel_ = new leimnud.module.panel();
	_oVarsPanel_.options = {
    limit    : true,
    size     : {w:400,h:600},
    position : {x:0,y:0,center:true},
    title    : '',
    theme    : 'processmaker',
    statusBar: false,
    control  : {drag:false,resize:true,close:true},
    fx       : {opacity:true,rolled:false,modal:true}
  };
  _oVarsPanel_.make();
  _oVarsPanel_.events = {
    remove:function() {
      delete _oVarsPanel_;
    }.extend(this)
  };
  _oVarsPanel_.loader.show();
  oRPC = new leimnud.module.rpc.xmlhttp({
    url   : sAjaxServer,
    method: 'POST',
    args  : 'sFieldName=' + sFieldName + '&sProcess=' + sProcess + '&sSymbol=' + sSymbol + '&sNoShowLeyend=1'
  });
  oRPC.callback = function(oRPC) {
    _oVarsPanel_.loader.hide();
    var scs = oRPC.xmlhttp.responseText.extractScript();
    _oVarsPanel_.addContent(oRPC.xmlhttp.responseText);
    scs.evalScript();
  }.extend(this);
  oRPC.make();
};

var insertFormVar = function(sFieldName, sValue) {
	oAux = document.getElementById(sFieldName);
	if (oAux.setSelectionRange) {
	  //oAux.value     = '';
		var rangeStart = oAux.selectionStart;
    var rangeEnd   = oAux.selectionEnd;
    var tempStr1   = oAux.value.substring(0,rangeStart);
    var tempStr2   = oAux.value.substring(rangeEnd);
    oAux.value     = tempStr1 + sValue + tempStr2;
	}
	else {
	  if (document.selection) {
	    oAux.focus();
      document.selection.createRange().text = sValue;
	  }
	}
	_oVarsPanel_.remove();
};

]]></JS>

</dynaForm>  
